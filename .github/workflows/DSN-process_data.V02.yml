name: DSN Process SQM/TESS Raw Data and Upload to Box
# Trigger the workflow on a schedule (in production mode)
on:
  schedule:
    - cron: '0 8 * * 3'  # Runs every Wed at 08:00 UTC
  workflow_dispatch:
  
#  push:
#    branches:
#      - main  # Trigger on push to the 'main' branch
#  pull_request:
#    branches:
#      - main
env:
  INFLUX_TOKEN: ${{ secrets.INFLUX_TOKEN1 }}
  BOX_CONFIG: ${{ secrets.BOX_CONFIG }}
  BOX_PATH: "DSNdata/BOX/"
  MERGE_PATH: "DSNdata/MERGE/"
  BOX_ARCHIVE_ID: "304428997491"

jobs:
  process_and_upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository, get python
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
          echo $CURRENT_DATE "Start DSN-process_data." >> DSNdata/RUN_LOG
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libc-bin curl
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 2: run DSN_V03.py on all files in DSNdata/NEW
      - name: Process files, write results to DSNdata/INFLUX
        run: |
          FILES=$(ls -1 DSNdata/NEW)
          if [ -z "$FILES" ]; then
            CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
            echo $CURRENT_DATE "No files in DSNdata/NEW." >> DSNdata/RUN_LOG
            echo "Exit: No files found in DSNdata/NEW." >&2
            exit 0
          fi
          for file in $FILES; do
            new_file="DSNdata/NEW/$file"
            echo "Process $new_file"
            python3 DSN_V03.py $new_file
          done
  
      # Step 3: Set Up Docker
      - name: Set Up Docker
        run: |
          echo "Installing Docker..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get remove -y containerd
          sudo apt-get install -y docker-ce
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version

      # Step 4: Run InfluxDB CLI in Docker
      - name: Start InfluxDB CLI Docker Container
        run: |
          echo "Pulling InfluxDB CLI Docker image..."
          docker pull influxdb:2.7.5
          echo "Starting InfluxDB CLI container..."
          docker run --name influx-cli -d influxdb:2.7.5 tail -f /dev/null

      # Step 5: Copy CSV Files to Docker Container
      - name: Copy CSV Files to Docker
        run: |
          echo "Copying .csv files to Docker container..."
          docker cp DSNdata/INFLUX/. influx-cli:/data/

      # Step 6: Upload CSV Files to InfluxDB Cloud
      - name: Upload CSV Files to InfluxDB Cloud
        run: |
          echo "Running InfluxDB CLI commands inside Docker..."
          IN_FILES=$(docker exec influx-cli ls /data | grep .csv || true)
          if [ -z "$IN_FILES" ]; then
            echo "Error: No .csv files found in /data to upload." >&2
            exit 1
          else
            echo "Influx files in docker: "$IN_FILES  
          fi
          for infile in $IN_FILES; do
            success=false
            for attempt in {1..5}; do
              echo "Uploading /data/$infile to InfluxDB Cloud..."
              docker exec influx-cli influx write \
              --host https://us-east-1-1.aws.cloud2.influxdata.com \
              --org DSN \
              --bucket DSNdata \
              --token $INFLUX_TOKEN \
              --file /data/$infile \
              --format csv \
              --debug && success=true && break
              echo "Attempt $attempt failed, retrying..."
              sleep 10
            done
            if [ "$success" = false ]; then
              echo "Error: Failed to upload $infile to InfluxDB Cloud." >&2
              exit 1
            fi
          done
          CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
          echo $CURRENT_DATE "Uploaded "$IN_FILES" to influx" >> DSNdata/RUN_LOG
          echo "All files successfully uploaded to InfluxDB Cloud."

      # Step 7: Install Box CLI
      - name: Install Box CLI
        run: |
          echo "Installing Box CLI via npm..."
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev
          npm install -g @box/cli
          box --version

      # Step 8: Boxing...
      - name: Upload Files to Box
        run: |
          echo "$BOX_CONFIG" > box_config.json
          echo "BOX_PATH is set to: ${BOX_PATH}"

          if [ -d "$BOX_PATH" ] && [ "$(ls -A $BOX_PATH)" ]; then
            IN_FILES=$(ls -1 "${BOX_PATH}")
          else
            echo "Warning: No files found in ${BOX_PATH}"
            IN_FILES=""
          fi
          echo "Configure and upload to Box."
          box configure:environments:add box_config.json -n "github-box"

          echo "++++++++++ IN_FILES: "$IN_FILES" in ${BOX_PATH}"
          for file in $IN_FILES; do
            box_file="$BOX_PATH$file"
            raw_file="${file/-[0-9][0-9]/}"
            cp $box_file $raw_file
            echo "Boxing $box_file"
            # Extract Box File ID from CSV
            box folders:items $BOX_ARCHIVE_ID --csv > results.csv
            box_ID=$(awk -F ',' -v fname="$raw_file" 'NR > 1 && $9 == fname {print $2}' results.csv)
            echo "Extracted Box ID: '$box_ID'"
            if [ -z "$box_ID" ] || [ "$box_ID" == "null" ]; then
              echo "🔎🔎🔎 File $raw_file not found, upload it"
              box files:upload "$raw_file" -p $BOX_ARCHIVE_ID -y -q
              echo "⬆️⬆️⬆️ Uploaded $raw_file"
            else
              echo "⬇️⬇️⬇️ Download Box File ID: $box_ID"
              box files:download "$box_ID" --destination $MERGE_PATH -y
              echo "✅✅✅ Downloaded $box_ID"
              python DSN-box_merge.py "$MERGE_PATH$raw_file" "$raw_file"
              box files:delete $box_ID -f -y
              echo "Uploading MERGED $raw_file to Box..."
              box files:upload "$MERGE_PATH$raw_file" -p $BOX_ARCHIVE_ID -y -q
              echo "⬆️⬆️⬆️ Uploaded $MERGE_PATH$raw_file"
            fi
          done
          echo "$CURRENT_DATE Uploaded $IN_FILES to Box" >> DSNdata/RUN_LOG
          echo "$CURRENT_DATE Uploaded $IN_FILES to Box: written to log."

      # Step 9: Clean Up
      - name: Clean Up
        run: |
          echo "Delete temporary files..."
          rm -f box_config.json
          rm -f DSNdata/NEW/*
          rm -f DSNdata/INFLUX/*
          rm -f DSNdata/BOX/*
          rm -f DSNdata/MERGE/*
  
      # Step 10: Commit Changes to DSNdata
      - name: Commit Changes to Repository
        run: |
          echo "Checking for changes in DSNdata..."
          echo $CURRENT_DATE "Deleted temp files." >> DSNdata/RUN_LOG
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add DSNdata/
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Updated DSNdata"
            git push
          fi
